Node
	binary-value: ...

	key: value
	...

	- list-item
	- ...

	value: @1.@list
	query with q: @1.@list | filter q
	match with q: ...




tomato
	color: red

doc = Node()
tomato = Node()
red = Node()
doc['tomato'] = tomato
tomato['color'] = red
// nope - needs to know how it is constructed, link back to interface

NodeDirectoryAbsolute
	path: ...
	- NodeFile
		name: ...
		node: Node{#source: NodeFile}
			tomato:{#source: NodeLine} Node
		- NodeLine
			linenr: (@prev.linenr or 0) + 1
			as String: list |> as String | join
			node: Node{#source: NodeLine}
				color{#source: Id}:{#source: KeyValue} red{#source: Id}
			- Id "tomato"
			- NodeLineBlock
				- NodeLine
					- KeyValue
						- Id "color"
						- Id "red"
' better;
	- file -> lines -> tokenize to lexemes w tokens -> astify to SourceNode(s)
		containing special fields, isomorphic to original text source
	- construct SourceNode.node (with meta #source back reference)
		still isomorphic (because of #source backref)
			though now with "resolved" structure
			+ local id tables built
	- resolve id to outside local
	- optimize
		alt1:
			eg. 1+3 -> replace NodeExpression{#source: NodeLine}
				-> NodeNumber{binaryValue: 4, #source: NodeExpression{#source: NodeLine}}
		alt2:
			eg. 1+3 -> add cache NodeExpression{#source: NodeLine}
				-> NodeExpression{#source: NodeLine, #cache{value: NodeNumber{binaryValue: 4}}}
		thereby still isomorphic




rimpy.todo
	tokenize
		comment
		string
		identifier
	astify

todo:
	...: rimpy.tokenize
		':show
			comment
			string
			identifier
	hello

':show todo
	comment
	string
	identifier
	hello


# goal
- resolve id
- merge node data
- "interactive" comment, writes back on save
- autocompletion integration with editor
- new syntax highlightning with editor
// - execute arbitrary python code with "interactive" comment


