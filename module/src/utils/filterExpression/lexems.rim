# filterExpression/lexems.rim
' LayerRenamer
	Created by Leonard Pauli, 21 jun 2018
	Copyright © Leonard Pauli 2018
	.
	- based on rim / towards rim

' desc:
	autoInsertIfNeeded: a!
	usingAnd: a b
	usingOr: a | b
	optional: a?
	repeat: a+
	repeat+optional: a*
	regex: /a/
		retain: -1 // default true
	together: (a | b)+ sp? (c | /a/+)* r!
	comment/description: a // some comment

// using string parsing?
filterExpressionLanguage: "expr"
	paren: "paren.open spv? expr spv? paren.close"
		open: /^\(/
		close: /^\)/
	num: /^[1-9][0-9]*(\.[0-9]+)?/ // 'number'
	spv: /^[\t ]+/ // space-vertical (optional for formatting / min 1 req for separation / elastic tab for alignment)
	expr: "expr.single (spv? expr.single)*" // expression
		single: "num | text | paren | id.strip | id.special"
	text: "text.open text.inner text.close!"
		open: /^"/
		close: /^"/
		raw: /^(([^\\"]|\\[\\"])*)/
		expr: "text.expr.open expr"
			open: /^\\\(/
				retain: -1
		inner: "(text.raw | text.expr)*"
	dot: /^\./
	comma: /^,/
	id: /^[^ .(){}[\]\n\t"]+/
		strip: "id | (id? (dot (id | text | paren))*)" // abc, .a."b".("b"+c)
		special: /^[-<>=+*/!,]+/


// valid rim, using custom node type with scoped operators
Syntax.rim.Child:
	operators.suffix:
		- x?: x{optional}
		- x+: x{repeat}
		- x*: x{optional, repeat} // x+? = x?+
		- x!: x{autoInsertIfNeeded}
	operators.infix:
		- a|b: {lexems: a, b; usingOr}
	line with comment-ending: line{description: comment-ending}
	value with key: value{name: comment-ending}
	line with valueAsText: line{syntax: asText}
	Child: self // by default, specific type will override


filterExpressionLanguage is Syntax: expr
	paren: paren.open, spv?, expr, spv?, paren.close
		open: /^\(/
		close: /^\)/
	num: /^[1-9][0-9]*(\.[0-9]+)?/ // 'number'
	spv: /^[\t ]+/ // space-vertical (optional for formatting / min 1 req for separation / elastic tab for alignment)
	expr: expr.single, (spv?, expr.single)* // expression
		single: num | text | paren | id.strip | id.special
	text: text.open, text.inner, text.close!
		open: /^"/
		close: /^"/
		raw: /^(([^\\"]|\\[\\"])*)/
		expr: text.expr.open, expr
			open: /^\\\(/
				retain: -1
		inner: (text.raw | text.expr)*
	dot: /^\./
	comma: /^,/
	id: /^[^ .(){}[\]\n\t"]+/
		strip: id | (id?, (dot, (id | text | paren))*) // abc, .a."b".("b"+c)
		special: /^[-<>=+*/!,]+/


' Notes
	§1234567890+´¨'-.,<
	°!"#€%&/()=?`^*_:;>
	¶©@£$∞§|[]≈±´~™–…‚≤
	•¡”¥¢‰¶\{}≠¿`^’—·„≥
	•Ω®†ıπ˙ß∂ƒ¸˛√ªﬁøæ÷≈‹›‘’°˜ˆ∏˚◊∫¯˘¬º«»”
	<>≤≥
	'"„”`´’‘«»‹›
	§1234567890
	±+-/=≈^*~√÷≈≠
	,‚:;
	#‰%&|
	!?¡¿
	¶@§–…
	¶—•·
	©™®†ı¸˛
	°˜ˆ˘˚˙¨¯
	∞Ω¥¢£$€
	πß∂ƒªﬁøæ
	∏◊∫¬º
	()[]{}\\
