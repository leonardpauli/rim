# study/stages/stage-0
' rim
	Created by Leonard Pauli, 20 jul 2018
	Copyright © Leonard Pauli 2018

// base

' TODO
	- multiline strings
	- commit
	- to lexems
	- test


# overview

singleline
	// any{except}
	// space{indent, one, none}
	comment{top-level, eol}
	expression
	identifier
	identifier.special
	number{int, decimal{precision}}{spacer}
	string{default, block, escaped}
	// string.raw

multiline
	document
	comment.block{default, string} // TODO: move impl. to singleline?
	line{depth, spacer, ghost, subline, content} // indentation + new line parsing


# syntax + lint

singleline
	syntax:
		lexems: [space.none, content.wrap]
		content.wrap
			lexems: [content, {type: tail.wrap, optional}]
			tail.lexems{usingOr}: [comment.eol]
			tail.wrap.lexems: [space.one{required}, tail]

		content.lexems{usingOr}:
			- comment.top-level
			- expression

	syntax
		any
			// regex: `[^\n]+`
			regex: `[^`(except.str)`]+`
			except.str: except.without `-` | it, `-` if except.has `-` | join "" // put - last bc as regex range operator
			except: (`\n`) // regex parts as valid in [] // TODO: use builtin regex tokenizer for validation

	space.syntax
		regex: ` `
		tab.regex: `\t`
		indent
			lexems{usingOr}: [tab, space]
			space.regex: `  `
			' lint.options.style is Enum(tabs, spaces-2): .tabs
			' lint.cases:
					- {regex: `  `} and lint.options.style is .tabs:
						warn: "indent using tabs"
						replacement: "\t"
					- {regex: `\t`} and lint.options.style is .spaces-2:
						warn: "indent using two spaces"
						replacement: "  "
			only
				lexems{usingOr}: [indent, @1.space]
				' lint.cases
					// - indent
					- space:
						warn: "only white spaces using indents are allowed here"
						replacement: []
		any.lexems{usingOr}: [space, tab]
		
		none
			optional
			lexems{repeat}: [space.any]
			' lint.cases
				- isn't Empty
					warn: "no initial space should be here"
					replacement: Empty
		one
			// TODO: required if not optional... (but then it's still... optional.. proxy somehow?)
			optional{keep-unmatched if required}
			lexems{repeat}: [space.any]
			// TODO: lineup as separate plugin, special for different cases
			// 	or possible with some generic pattern recognition?
			// TODO: lineup: auto-detect that lineup is used instead of one
			// 	and suggest switching the option (per line, block, file/module, project, or user default)
			' lint.options.style is Enum(one, lineup): .one
			' lint.cases
				- is Empty and required
					warn: "should be some space here"
					replacement: " "
				- isn't " " and required and options.style is .one
					warn: "only use one space for spacing"

	comment
		initial-spacing:
			lexems: [space.one{required}, space.indent.only{optional, repeat}]
			' lint.options // TODO: ablility to disable sub-token linting
		top-level.syntax:
			start.regex: `#`
			content
				default.lexems: [any]
				lexems: [initial-spacing, default{optional}]
		 	lexems: [start, content]
		eol:
			indicator.regex: `//`
			lexems: [indicator, initial-spacing, any{optional}]
			' lint.options.clean-empty-ending
			' lint.cases:
				no-content: [indicator, initial-spacing{optional}, Empty]
				- no-content:
					warn: "no content"
	
	expression:
		lexems: [content, {lexems: [space.one{optional}, content], repeat, optional}]
		content.lexems{usingOr}:
			- number, string // , string.raw
			- identifier.special, identifier

	identifier // no grouping
		lexems: [start, tail{optional, repeat}]
		start: end{except.append: r`0-9`}
		tail.lexems: [middle{optional, repeat}, end{repeat}] // to allow `a-b-c` as identifier (sure? possibly ambiguous with a - b - c?)
		middle: any{except: (..." (){}...", ...(identifier.special.chars.list - "-"))}
		end: middle{except: (...identifier.special.chars.list)}
	identifier.special
		chars: ", . : ; - @ #" | split " "
		// chars: "+ - * / = ≠ ≈ ! % < > ≤ ≥" | split " " // each stage can just append
		any: r`[`(chars)`]+`
		lexems{usingOr}: [any]

	number{int, decimal{precision}}{spacer}
		// 0, -7, 40.03, 1_000.005_300 (zeros at end are recorded for precision)
		leading-zeros: r`0[0_]*`
			' lint{options.use is Boolean: true}.cases:
					- not Empty:
						replacement: []
						warn: "use no leading zeros"
						// TODO: different for binary using Least Significant Bit (or reverse)?
						// 	even ability to force fill up to 1, 4, 8, x*8, etc bits?
		whole-part
			lexems{usingOr}: [zero-only, zero-only-not]
			zero-only: {regex: r`0(?=[^0-9])`}
			zero-only-not
				lexems: [leading-zeros{optional}, natural-number{optional{keep-unmatched}}]
				' lint.cases
						- [...first, natural-number{unmatched}]:
							replacement: [...first, "0"]
							warn: "missed something?"
			natural-number: {regex: r`[1-9][0-9_]*`}
		decimal-part
			lexems: [decimal, digits]
			decimal: r`\.`
			digits: r`[0-9_]+`
			// TODO: trailing zeros should be allowed in some cases as precision information
			// TODO: lint to auto-detect when `,` was used instead of `.`
		sign-negative: r`-`
			// TODO: lint to auto-detect wrongly used space between sign and number (eg. diff? see other notes (- 5), (-5), (0- 5), (0 - 5), ((-) 5), etc)
		lexems: [sign-negative{optional}, whole-part, decimal-part{optional}]
		' lint{options.underscore-formatting is Enum(force-scientific-if-used, force-scientific-always, off)}.cases
				- force-scientific-always or (((whole-part.natural-number or decimal-part.digits) contains "_") and force-scientific-if-used):
					// TODO: ability to force use on decimal/whole-part separately
					fix-delimiter{reverse-should: true}:| it.remove{all} "_"
						| reverse if reverse-should
						|> it + ("_" if ((index+1) mod 3 is 0) and index isn't last)
						| reverse if reverse-should
					replacement: [(it.natural-number | reverse | fix-delimiter | reverse), it.decimal-part.decimal, (it.decimal-part.digits | fix-delimiter)]
					warn: "only add separator every third digit (scientific formatting?)" // only if replacement isn't same as original

	string.syntax:
		lexems{usingOr}: [default] //, string.raw
		default:
			(close, open): r`"`
			' close.lint{options.force-close: false}.cases:
				- [] and force-close:
					replacement: `"`
					warn: "forgot closing quote? (force-close enabled)"
			lexems: [open, content{repeat, optional}, close{optional, keep-unmatched}]
			content
				lexems{usingOr}: [line, escaped, raw]
				raw: any{except: (`"`)}
			content.block is content{raw: any} // a quote inside subline doesn't close

			line:
				lexems: [start, content.wrapper]
				content.wrapper.lexems{usingOr}: [@1.line.spacer, content]

				content.lexems: [indent, @1.content.block]
				start.lexems{usingOr}: [escaped-new-line, new-line]
					escaped-new-line: r`\\\n`
				indent.lexems: [@2.multiline.line.indent.outside, @2.multiline.line.indent]

			escaped
				start: r`\\`
				lexems: [start, content]
				content.lexems{usingOr}: [start, any] // insert{after: start}: expression.paren
	' string.raw.syntax:
		(close, open): r```
		lexems: [open, content{repeat, optional}, close]
		content.lexems{usingOr}: [backtick, raw]
		content.backtick: r"```"
		content.raw: any{except: (`"`)}


multiline.syntax
	lexems: [document]
	document:
		lexems: [document.line]
		document.line{is line{depth: 0}}.lexems: [line.indent.inside]
		' lint:
			options
				eof is Enum(new-line, new-line-not, off): new-line
				line.spacer.max is Int{≥ 0}: 3
			cases:
				// - [(:...first), line.spacer.clean]: noop
				- [(:...first), line.spacer.spaced] and options.eof is new-line:
					replacement: [...first, line.spacer.clean]
					warn: "use 'unix file endings', ie. keep an empty new line last (more consistent behavior when using tools like git, cat, editors, etc)"
				- [(:...first), line.spacer.spaced] and options.eof is new-line-not:
					replacement: [...first]
					warn: "use no new lines at end of file"
				- [(:...first), line.spacer{repeat ≤ options.line.spacer.max} (:...spacers-ok), line.spacer{repeat}, (:...last)]
					replacement: [...first, ...spacers-ok, ...last]
					warn: "formatting/structure: use max \(options.line.spacer.max) spacer lines"
	
	end.lexems{usingOr}: [new-line, EOF]

	comment.block: // TODO: parse comment block as code + validate (though all errors as warns instead)?
		lexems{usingOr}: [default, string]
		default
			lexems: [start, block-content{optional, keep-unmatched}]
			' lint.cases:
				- block-content.count is 0:
					replacement{all}: []
					warn: "empty block-comment"
			start: [prim, space.one]
			prim: r`'`
			block-content:
				lexems: [line{repeat}]
				line.lexems{usingOr}: [@1.line.spacer, line.content.wrapper]
				line.content.wrapper: [@1.line.indent.outside, line.content{optional}, end]
				line.content: r`[^\n]+`
		string.lexems: [prim, singleline.string]

	// indentation + new line parsing
	line{depth is Int}
		lexems{usingOr}: [spacer, ghostwrapper]
		
		spacer // ( |\t)*n -> p
			lexems: [whitespace-horizontal{repeat, optional}, end]
			whitespace-horizontal: r` |\t`

		ghostwrapper: // \t*c -> g.(...).g.c
			lexems{usingOr}: [ghostline, line.inside]
			ghostline.lexems: [indent, ghostwrapper]

		inside.lexems: [content, subline{repeat, optional}]

		subline.lexems: [indent.outside, line{depth += 1}]
		indent.regex: r`  |\t`
		indent.outside.matcher: js`({parents: [p], regex})=> p.depth==0? {matched}: regex(```indent{${p.depth}})```)`

		content.lexems{usingOr}: [comment.block, singleline] 

	' notes:
		- regex m flag when matching with "\n" // ?
		- matcher: js`({ctx, str, fullstr, parents})=> ({match.length is Int{default: 0}, matched is Boolean{default: true}, state: {}})` // ?
		line-types:
			s: SOF
			t: tab/indent
			c: line.content
			n: line.new
			g: line.ghost
			p: line.spacer
			u: line.sub
			e: EOF
