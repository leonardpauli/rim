# study/stages
' rim
	Created by Leonard Pauli, 16 jul 2018
	Copyright Â© Leonard Pauli 2018

stages:
	// inverse stage notation from js/babel

	- stage 0: "base" // required for any parsing
	- stage 1: "declarative" // fundamental for use as declarative data structure/graphs
	
	- stage 2: "standard" // minimal standard additions, helpers/sugar + makes logic possible
		packages // is default core additions // network, IO, etc
	
	- stage 3: "recommended" // nicer syntax, etc
		packages // is recommended additions // extra math stuff, network nicer interface/helpers for use-cases/protocols not in core, etc
			' have or not?
				would be neat to keep stage-2 to a minimal
				+ have most logic + std stuff in separate stage
					with clear notion that it's just recommended
						and therefore easily replacable
				though, eg. vs:
					- http (few uses, core functionality + explicit (not as dev-user-friendly), but std)
					- express
						became seen as the "recommended"
							early + in most tutorials, similar as to jQuery
						easier use, but not std
					- koa
						better imo
						made by same as behind express
						lower use, but slowly increasing
				using declarative... it should be possible to have:
					- explicit core (in stage 2??)
					- recommended implicit binding (in stage 3??)
					- that can easily be switched to another variant by user (stage 4..5??)
	
	- stage 4: "community" // community implementation not yet in recommended (generally because some quality bar not met; not feature complete enough, too niche, not enough competition, not in prod for long enough, not maintained enough, etc
	
	- stage 5: "experimental" // "best" community implementation from stage 5 selected
	- stage 6: "experimental-community" // for plugins created by community but not yet incorporated into rim // multiple variation can exist, no guarantees, do not use in production (if you're not a maintainer)
	- stage 7: "ideas" // without MVP experimental implementation
	
	' TODO
		- stage-X-plugins // for source-code -> internal
		- stage-X-adapters // for internal -> external (eg. back to source-code, or different target)
		- stage-X-packages/libs // eg. UI, DB, 
