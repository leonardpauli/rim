# study/parser/node-structure
' rim
	Created by Leonard Pauli, 20 jul 2018
	Copyright Â© Leonard Pauli 2018

' TODO
	outlining the rim js parser Node object interface
	- instantiated during astify, ie:
		file(source code)
			-> tokenizer(tokens tree)
			-> astify(parserNode tree)
			-> ...(...plugins).modifiers(parserNode tree) ' eg.:
				- linter
				- ?
			-> outputs: adapters |> ' eg.:
				- write-back
					' -> modifiers(parserNode tree) // already done
						- linter
					-> reducer(source code files)
				- wasm
					-> modifiers(parserNode tree)
						- optimise
					-> reducer(wasm files + source maps)

// see js/node-structure

# Notes / scratchpad

Node
	lexem is Lexem // see parser/lexem-structure

	value
		raw is Binary // binary data; bytearray eg. number, string, etc
		on set with val{is Binary}
			' allow plugins middlewares
				- do value.cache: preprocess raw
				- do output.node.update with modifier.fn (input, value)
				- plugin.declarative to update dependents

		cache is Object // processed raw
			' eg. indexes over larger string for faster find?
				for plugins and custom types to utilise until standardised way
					(/namespace structure) for their specific need is fixed
		
	propertiesList is many Property
	properties: propertiesList |> {(it.key): it} | merge

	' TODO:
		input
		modifier.fn
		output
			node is Node
		query.fn
