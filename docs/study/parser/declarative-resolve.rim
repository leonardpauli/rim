# study/parser/declarative-resolve
' rim
	Created by Leonard Pauli, 21 jul 2018
	Copyright © Leonard Pauli 2018

// declarative resolve to build dependency graphs + logic for reactive updates

// dependency graph buildup over updates
a: 5, b: 6, c: a + b
(a, b) -> c

do a:= b
b -> ((_ -> a), _) -> c

do b:= c
c{circular} -> b -> ((_ -> a), _) -> c

do e:= b
c{circular} -> b -> e, (((_ -> a), _) -> c)


step.fn.alt.0:
	State
		nodes is Dictionary
			key is Node
			value is {iterations: {taken is IntRs: [], targets is IntRs: [0]}}
			// TODO: ability to use many
			// TODO: ability to overide automatic compiler decisions (eg. Type.@.datastructure{options...})
		dependents-left is Set of many Node
	step with (node, state) is (Node, State): // (node is Node, state is State)
		iterations: state.nodes with node | .iterations
		// ({iterations}:) state.nodes with node // using destructuring
		' Dictionary is KeyValueCollection / utility wrapper for `many KeyValue`
			`(myDict: Dictionary({key, value: 5})) with key` returns value for key, in this case 5
			if entry doesn't exist, it's created
		if iterations.taken 
		circular: true if node is in taken else false
		if circular: circular...
		if not circular:
			dependents-left.add ...node.dependents
		dependents-left | stepOptimisingSort | step .0
		// TODO
	stepOptimisingSort: ...
		' eg. `c, e -> e, c`
				will reduce e (shortest subtree) as fast as possible
				instead of having it accumulate bc. c subtree is recursive
					(and therefore of infinite length)
			// TODO: how to handle two dependent infinite/circular?
	IntRs is (many Int){@.datastructure{use(ranges, single values)}}


step.fn.alt.1:
	' overview:
		source changed
			-> Node.update with value
			-> Node.value changed
			-> step with node
			-> add ordered dependents of node to list
				case ((a, b) -> c), update b
					-> c is dependent -> recalc c after
				case (a -> (_, _ -> b) -> c), update a
					-> (b, c) is dependent
						but c is dependent on b, so do b before c
	Node
		on update with new-value
			return if self.value is{exactly} new-value
			// old-value:= self.value
			node.value:= new-value
			step with self
	step with (node is Node, taken is Dictionary{key is Node, value is many Int}): // value; circular index
		
		node 

(taken; dependents-left)
- b
- a; (c)
- c; (b)
- b; (a, c)






// js parser node
// see parser/node-structure
Node
	value
		raw
		set with val

		' input/output on node or just use modifier function + impure flag?
			also, instead of trottle, just update on second value changes
				which can be eg a (timer | ms | /16 | floor) + if value changes?
		input:
			enabled: false
			pull:
				enabled: false
				trottle
					enabled: false
					frequency.max: 100
			fn: ...
		output:
			enabled: false
			push:
				enabled: false
				trottle
					enabled: false
					frequency.max: 100
			fn: ...
			
		cache: 5
		dependents: [c, d]
			on update: reorder for optimum update value tree update later on, eg. shortest dependents tree first?
		// re-eval dependents
		// defer their dependents valueSet
	' valueSetDependentsUpdateThrottle // as plugin?
		' eg.:
			- time updates at 1MHz
			- accelerometer.value updates with 1kHz
			- UI computations only need 120Hz to get good value for
			- screen update at 60Hz
			then;
				(accelerometer.value + time) // updates at max(1MHz, 1kHz) = 1MHz
					| someProxy{@.throttle: 120Hz} | calculateVelocityForUI // updates at 120Hz
					| someProxy{@.throttle: 60Hz} | updateUI | updateScreen
			though this could probably be accomplished with custom node..
			---
			or do it backwards? only request values to be computed or fetched backwards?
				so if only output is the screen with 60Hz, the accelerometer will only be queried at 60Hz...
				though velocity calculation needs intermediate values... so it is triggered by a timed "sink" outlet at 120Hz
				...



lists:
	' declarative-resolve: algorithm to handle merging of multiple list-declarations:
		eg.: a (1, 2); a (3, 1, 4, 5); a (77); a (0) -> a: (0, 3, 1, 2, 4, 5, 77)
		- commutative (order of declaration should not matter)
			- additative only
			- using sort/compare/< to consistently solve ambiguous cases
		- use arrayDeltaActions to keep relative order
	instead of using exact index for merging, store relative sorting rules
		using utils/arrayDeltaActions:
			- [e, b, f, g, d, c, h]
			- [a, b, c, x, d]
			actions:
				- rem e, add a
				- nop b, mov c
				- rem f
				- rem g, add x
				- nop d
				- rem h
			actions{additative}: // [e, a, b, c, f, g, x, d, h]
				- (nop e), add a
				- nop b, mov c
				- (nop f)
				- (nop g), add x
				- nop d
				- (nop h)
		using utils/arrayDeltaActions:
			- [a, b, c, x, d]
			- [e, b, f, g, d, c, h]
			actions:
				- rem a, add e
				- nop b, add f, add g
				- mov d
				- nop c
				- rem x, add h
			actions{additative}: // [a, e, b, f, g, d, c, x, h]
				- (nop a), add e
				- nop b, add f, add g
				- mov d
				- nop c
				- (nop x), add h
		[e, a, |b|, c, f, g, x, d, |h|] // a -> b using delta-actions{additative}
		[a, e, |b|, f, g, d, c, x, |h|] // b -> a using delta-actions{additative}
		[a, e, |b|, f, g, c, x, d, |h|] // (a, b) -> merged using delta-actions{additative, commutative/consistent-using-order-constraints+sort}
			- identify minimal self-contained sub-groups: ([e, a], [b], [c, f, g, x, d], [h])
			- solve order in sub-groups:
				- [a, e]: no relative constraints; ambiguous; use sort (e not < a) -> (a < e) -> [a, e]
				- [b]: nothing to order (.count ≤ 1) -> same -> [b]
				- [c, f, g, x, d]: resolve-ambiguous-constraints | sort-using-constaints -> [f, g, c, x, d]
					' [c < x, x < d], [f < g, g < d, d < c]
							-> [c < x, x < d, c < d], [f < g, g < d, d < c, f < d, f < c, g < c]
							// [c < x, (c, x) < d], [f < g, (f, g) < d, (f, g, d) < c]
							| replace (d, c) with (c, d)
							-> [c < x, x < d, c < d], [f < g, g < d, c < d, f < d, f < c, g < c]
							// [c < x, (c, x) < d], [f < g, (f, g) < c, (f, g, c) < d]
							// | sort-using-constraints
							// -> [c, x, d], [f, g, c, d]
							| concat | filter.unique
							-> [c < x, x < d, c < d, f < g, g < d, f < d, f < c, g < c]
							// [f < g, (f, g) < c, c < x, (f, g, c, x) < d]
							| sort-using-constraints
							-> [f, g, c, x, d]
					resolve-ambiguous-constraints:
						the order items are declared in a sub-groups might be different for each (re)declaration (of the list)
						eg. this sub-group ([c, f, g, x, d]) comes from two declarations, which can be seen as sets of order constraints
							- [c, x, d] // order constraints: (c < x, x < d) // intermediate: (c < d)
							- [f, g, d, c] // order constraints: (f < g, g < d, d < c) // intermediate: (f < d, f < c, g < c)
						an order constraint is an ordered pair of items
							if a reversed pair ((c, d) -> (d, c)) from one declaration appears in another declaration:
								the constraints are opposite, and therefore incompatible, which makes the merging ambiguous
									to solve: replace both constraints with one using deterministic sort of the items (([d, c], [c, d]) -> sort (d, c) -> [c, d])
					sort-using-constaints // simple sort using constraints as lookup for comparison operation
				- [h]: (.count ≤ 1) -> same -> [h]
			- concat sub-groups with ordered items: ([a, e], [b], [f, g, c, x, d], [h]) -> [a, e, b, f, g, c, x, d, h]

	// ---
	declarative-resolve list limitation: only additative + unique across declarations
		to allow multiple, use insert{(before/after item)} // using eg. a.insert{before x}: (d, e) -> constraints ((x < d), d < e, (x < e))
			' all inserts are treated as made before any usual declarations // to avoid ambiguous cases
				ie. a: (b, c); a.insert: (b, d); a.insert: (d) -> a.insert: (b, d); a.insert: (d); a: (b, c) -> a.insert: (b, d, d); a: (b, c) -> a: (b, c, d, d)
					(and not as a: (b, c); a.insert: (b, d, d), which could be interpreted as a: (b, b, c, d, d)) // note the lack of the extra b
			' eg.
				a: (g, e, g) // a: (g, e, g)
				a: (e, e, f) // a: (g, e, e, f, g) // one e + one f added, f < g
				a: (e, e, f) // a: (g, e, e, f, g) // nothing changed
				a.insert: (e, e, f) // a: (g, e, e, f, g, e, e, f) // all appended
				a: (f, e, g, g) // a: (g, e, e, f, g, g, e, e, f) // only one g added

