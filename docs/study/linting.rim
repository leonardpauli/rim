# study/linting
' rim
	Created by Leonard Pauli, 15 jul 2018
	Copyright Â© Leonard Pauli 2018

linting:
	user settings:
		defined using rim // makes them extendable, etc
		depending on environment + variable:
			use same rim parser/compiler/runtime instance for all
			- on editing pause // delay more than 300 ms? configurable
				autofix clear + when cursor is moved away
					ability to overide which rules this is done for // add/remove
					...
				warn ambiguous unintrusively
			- on save
				autofix unambiguous ambiguous
				loose: warn ambiguous intrusively
				strict: error ambiguous intrusively
			- on dev run:
				reuse on save
			- on commit:
				use strict + use max warnings, only pass if ok
				allow parts marked as WIP to pass even with errors/warnings
					branch specific setting
						+ ability to take "dead code elimination" into account
							eg. only pass errors if WIP and dead code, as determined by tests?
					files with top level comment `# WIP` // (?)
					blocks with `// WIP` (?)
		strictness: strict/loose
	case:
		- clear
			eg. spacings
		- ambiguous
			case to select
				- unambiguous with user lint settings
					autofix through change of sourcecode
					add note that it was fixed
						option to add lint option comment (ignore or alt rule)
				- strict: force user to choose
					though change of sourcecode // syntax
					give autofix options
					option to add to lint config
						unintrusive smart: if many similar + majority conform, etc
				- loose: choose one, go on, + add warning
					(ability to add ambiguous-syntax-max-warnings-ok )
			auto debugging
				of output cases, eg. "or did you expect this output instead (because of this (autocorrected) ambiguous case?

lint notes:
	this has been: auto added / auto fixed
	reason: or:
		- parser core
		- ast core
		- ast additions by code from core lib
		- ast additions by code from user imported lib
		- ast additions by code from user
		- default lint settings
		- user lint setting
			plausable reasons:
				- intentional (user writes without formatting, but want to read it pretty)
		- ambiguous // ie. "just took one to make it valid"
			plausable reasons:
				- unintentional:
					- user missed something when working with the code
						-> show correction options
					- user unsure about syntax
						-> explain differences in correction options
							smart: if user has shown that they know what they do, show only wanted info/options


parsing
	parse level lint notes
astify
	core ast level lint notes
	user/lib code ast additions level lint notes
