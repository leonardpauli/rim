# study/syntax/singleline
' rim
	Created by Leonard Pauli, 14 jul 2018
	Copyright Â© Leonard Pauli 2017-2018

// see study/linting
// see singleline-extra
// TODO: see singleline-todo


# top-level line comment
// end-of-line comment
# // EOL-comment in top-level comment (EOL style but with top-level comment bg)
#text // lint `# text`
#a//b//c // lint `# a // b//c`
#// // lint remove empty comment
# // lint remove empty comment
// // lint remove empty comment


# identifier
identifier
identifier // EOL comment
identifier//EOL comment // to lint
a b // two identifiers
a b c d // many identifiers


# identifier.special
+
a + // normal + special identifier (suf)
+ a // normal + special identifier (pre)
a + b // normal + special identifier (in)
a+ // normal + special identifier (no space)


# identifier.boolean // not in parser, also, aliases
true
false
// yes: true; no: false // add aliases // TODO: though this should be done with true.rim.alias(yes)


# colon
: // alone
a: // no value
a: b // key-value, make a be a function of b // though same as setting a.0 to b? (right, and resetting a.(1..))
a b // pass b to the a function, return result (same as ((a.copy): b) (ie. setting a.0 to b and returning result of a's function without modifying a))

:: // double alone, another special identifier
a::b // another special identifier
a :: b // another special identifier

: b // no key (though could have meaning?, extend block with b (nah)?)
:b // to lint (though could have meaning?)
a:b // special operator / format (eg. see date/time) (though potetially warn)
a : b // special operator / format (eg. see date/time) (though potetially warn)


# parens // used to group parts at ast-level
( // lint add close (with question)
) // lint remove (with question)
() // shorthand for Empty, or just no value?
(a) // a // only visual diff
((a)) // to lint `(a)` // max one for visual, though possibly configurable?, or not even one?

(b) a // b a
(a b) c // (a b) c
a (b c) // a (b c)
a + (b + c) // a + b + c // paren makes no difference with associative operators?, except for visual, 
a (b (e f) // to lint (add ending paren) + with question
a ((b (c) d (e f))) // many nested

a () // same as `a()` same as `a` // fn `a.fn` (or something) vs fn value `a`
a (b) // a b
a(b) // similar to (`a (b)` same as `a b`)
a(b) c // a(b, c)
a (b) c // a(b(c)) // spacing makes a difference for grouping


# curly braces
} // alone close brace; expected to close brace block, traverse before and see if faulty indentation to auto fix, else ignore and warn
a } // eighter treat as alone close brace, or ignore + warn for unexpected (probably unintentional) extra close brace (if valid matching open not found)
{ // open brace at EOL; opens brace block (indentation inside block not as important for parsing, though lint fixed and without min indent, close brace might have issues correcting / not as effective?, close brace required)
{ a // unmatched line open brace; warn + lint add close (?)
{} // shorthand literal for Node
a {} // see `a b`
a: {} // see `a: b`
a{} // extend a's properties (not input as in `a {}`)

a.b // just accesses b property of a, doesn't create anything
a.b: true // set value on b property on a

a{b} // (a.b: b) if b exists or (a.b: {}) // not same as (a.b; a).-1
a{is b}
a{not b} // remove b proberty
{b: c} // similar to (a.b: c; a).-1


# number.(integer, decimal)
0
1
001.00200 // lint `1.00200` // trailing zeros for precision, leading are superfluous


# range


# identifier.special.comma
, // alone
a, b // one
a, b, c // many
a ,b , c,d // to lint
a, , b // abundant, to lint (with question) (-> a, b) // or use a, Empty, b
a, (b, c) // should be same as (a, b), c // , is an associative operator, thereby parents doesn't matter
# identifier.special.comma // same effect as comma, though lint-preffered in block
; // semicolon
a; b

a: b, c // a: (b, c) or a: b; c
