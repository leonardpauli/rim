// rim example
// created by Leonard Pauli, 21 dec 2017

// iterate from 3: it + 1 if it is 3 else Empty //: 3, 4
// iterate from 3: if it < 6: it + 1; else: Empty //: 3, 4, 5, 6
// iterate from 3: it + 1 if it < 6
// iterate from 3: it + 1; | filter < 6
// (iterate from 3: it + 1) | filter it < 6
// returns array of iteration results, ends when first Empty reached

#
Http.Status {code is 0..999, title is String}
Http.Header ...
Http.Request with url<Http.URL>
	response: do ...
		status is Status: ...
		headers is many Header: ...
	error: or:
		- URL.error
		- response.error

// https://www.slideshare.net/devbash/introducing-elixir-devbash
// based on https://image.slidesharecdn.com/elixirdevbash-150128080904-conversion-gate01/95/introducing-elixir-and-otp-at-the-erlang-bash-5-638.jpg?cb=1422434968
Http.Request
	response.redirection: or:
		- status in (301, 302, 307): Request with url as headers.location
	redirects.count.limit: 10
	redirects: iterate from response.redirection: .redirection | first .count.limit
	error: .error or:
		- redirects.last?.error
		- redirects(count is count.limit and last.redirection exists): Error:
			"More than \(redirects.count) redirections"

#
// elixir: Enum.map([1, 2, 3], &(&1 * &1)) #=> [1, 4, 9] // slide 29
(1, 2, 3) | map it * it //: 1, 4, 9
1..3 |> ** 2 //: 1, 4, 9

kvadrera x: x * x
svar with nummer: nummer |> kvadrera
nummer: 1, 2, 3
svar with nummer //: 1, 4, 9

#
Twitter
	credentials: ...
	stream is Stream.Filterable<Tweet>: ...

credentials: ...
// slide 31
Twitter{credentials}.stream |> is Link |> to TweetWithExpandedURL:
	entities.urls: .urls |> .expanded

#
Interface from node<Node>
	mock // almost node copy, but all actions / IO
	// return Empty (if allowed) or some "mock" value of that field
	// "mock" library that adds .mock (?, through reverse getter) to all fields, using meta info
	// like type (with range, ie Number.Int{validate: 1 < it <= 4, not signed}) + field name (ie. "Person.name")
	// to generate a compelling "faker" text

Worker from node<Node>:
	interface: Interface from node
	node
	' allows for extra optimisation if not "too" remote
		allows for auto setup / creation
		if not provided, Node has to exist at remote and follow interface
			(interface match validation will be performed during init)
				only used parts have to match
	// or should base thing/Node be called just Object?

Worker from interface<Interface>
	' inherits/uses Node, but all events gets sent over network (if remote),
		or at least memory-copied / performed in separate thread/cores/instance/datacenter...
		because everything in rim is lists / streams, it won't change the code a dime
		except for possibly two words (do (Worker with MyThing).thing instead of do (MyThing).thing)
	node is interface.mock or Empty
	remote: ... // or connection // local by default, will use different cores if profitable
		// for ie. Worker with B of Worker with A
		// A1 might initialize the B1, but A2 might reuse B1
		terminatesIfNoConnections: true // terminating A1 will keep B1 alive until A2 is terminated as well
		recreateIfTerminatedRemotely: true // if A2 manually terminated B1, A1 would recreate new B
			delayIfRecreationCircle: 1000 // if B is set to create A (which is set to create B)
				// -> creation will be delayed to allow for manual termination,
				// value of 0 would require some exit solution....

#
// slide ..40
Logger
	Line: {message is String, date: Date}
	on log with message: {be Line{message}; return Empty}
	messages: log
	datelog: messages |> "\(.date.format "dd/MM-YY hh:mm:ss"): \(.message)" | join "\n"

logger: Worker from Logger:
	remote: ...
1..4 |> to String |> do logger.log
action: logger.log "5" // delay performing
do action, do action // invoke
logger.datelog //: 22/12-17 01:10:39: 1\n...2...3...4...5...5

#
DB
	adapters is many Adapter
	models is many Model
DB.Adapter
DB.Model

Postgres is DB.Adapter: ...

// https://github.com/elixir-ecto/ecto
DB
	adapters: - Postgres {port, hostname, privateKey}
	models: - Weather:
		- city is String
		- temp_lo is Number.Int // probably would do this differently, but flat structure
			// might good when "low level" com with flat structure db...
		- temp_hi is Number.Int
		- prcp is Number{precision: (1,3)}: 0 // whaat?

use DB.models
topLowestTempInKrakow: Weather(city="Krakov") | orderBy temp_lo | first 10



# Sorting

n is Number or Empty: 5
n if n is not Empty else: 3
// is not -> isn't/isnt, isn't Empty -> exists
n if n exists else: 3
// n if n fn -> n if it fn -> n if fn
n if exists else Empty -> n?
n? or 3



// see https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-List.html
List
	// count
	sorted:
		partition: self if is Empty else: +
			- self | filter <= self.0 | partition
			- self.0
			- self | filter > self.0 | partition
		be partition
	qsort: +:
		- qsort: . | filter <= .0
		- .0
		- qsort: . | filter > .0
	qsort(self=Empty): self
	qsort: +: <=, ==, > |> self.filter it .0 |> qsort
	' haskell:
		qsort [] = []
		qsort (p:xs) = qsort lesser ++ [p] ++ qsort greater
			where lesser  = filter (< p) xs
						greater = filter (>= p) xs

	head: .0
	tail: self | skip 1
	last: .(count - 1)
	// + with list<List>: (use self; use list)
	toOne with (operation with a, b): self | filter exists | match .count: // reduce / *fold*?
		- 0: Empty
		- 1: .0
		- 2: operation with .0 and .1
		- else: toOne with operation of
			- .head
			- .tail.toOne with operation
	max: toOne: .0 if > .1 else .1
	min: toOne: .0 if < .1 else .1
	sum: toOne: .0 + .1 // fold
	avg: sum / count
	median: match count:
		- even: self.(count / 2 | ceil)
		- else: count / 2 | avg of (self.(it) and self.(it + 1))
	take range<Range>: self | skip range.start | first range.length


	filter f: ...
	map f: ...
	self |> f: self.map f
	self |=> f: self.filter f

Node
	self | node: node self


0..9 | take 2..4 //: 2, 3, 4 

List.padding with n, item: n - .count | max 0 |> item |
List.leftpad: padding + self
List.rightpad: self + padding



// https://learnxinyminutes.com/docs/haskell/
Number
	even: self.mod 2 == 0

fib x: match x:
	- 0: 0
	- 1: 1
	- 2: 2
	- else: fib (x - 1) + fib (x - 2)
	// - else: fib (x - 1) + fib $ x - 2 // nah
	- else: fib (x - 1) + fib: x - 2
	- else: fib: x - 1; + fib: x - 2
	- else: x - 1, x - 2 |> fib | +
	- else: +: fib <| x - 1, x - 2
	- else: x, x |> - .i |> fib | +

add a, b: a + b
foo: add 10
foo: + 10 // or 10 +?
foo 5 //: 15
bar: 4 * <| 10 +




# scoped declare for pipe
x | y | z; -{x: 1, y: 2, z: +} //: 3
x | y | +; //: 3
	- x: 1
	- y: 2

