# base/setup-from-scratch
' LeonardPauli/js-module-base
	Created by Leonard Pauli, 21 may 2018
	partly based on lp-vue-base, 17 apr 2018

prerequisites:
	- git, node (with npm), docker (optional)
	- lpdocs=~/projects/own/docs
		- see: vimx, package-json-script-add, package-json-set-val
	// cd $lpdocs/files
	- name="js-module-base"
	- subname="module"
	- project="$(pwd)/$name"
	- imagename="leonardpauli/docs-app-js-module-base"
	- project_title="$name"
	- description_shorter="starting-point for my js/node modules, see LeonardPauli/docs/app/js/module"
	- licence_spdx="AGPL-3.0-or-later"
		// add licence, etc, see $lpdocs/app/js/registry/npm."package.json"
				// TODO: add dual licence by default? + default readme + licence in package.json
				// eg. "licence": "AGPL-3.0-or-later", ...
	- licence_short="GNU Affero General Public License v3.0 or later"
	- licence_note="For commersial / closed-source / custom licencing needs, please contact us."
	- author_line="" // Leonard Pauli <leonardpauli@me.com> (https://leonardpauli.me)
	- copyright_holder="" // Leonard Pauli
	- lint_glob='{src,__tests__}/**/*.js'

	subname.init: // perform later, see under module
		- mkdir $subname && cd $_
		- npm init -y
	subname.add-git-hook-runner-inner:
		- cd $subname
		- cp $lpdocs/app/misc/git-hook-runner-inner.sh ./
		- npm i -D yorkie lint-staged // aka. fixed husky // TODO: CHECK that it's the right one
			// https://github.com/okonet/lint-staged
			// https://github.com/yyx990803/yorkie/commits/master
		- echo '{ "pre-commit": "lint-staged" }' | package-json-set-val gitHooks -
		- echo '{ "'"$lint_glob"'": ["npm run lint --", "git add"] }' | package-json-set-val lint-staged -
			// lint modifies file, git add adds back the change to stage
		- package-json-script-add '"lint": "f () { echo todo lint: \"$*\" && exit 0; }; f"'
		// - npm i + vi to reformat package.json
		- cd ..
	container.dev-adjustments:
		- package-json-script-add '"dev": "npm run install-if-needed && node index.js"'

	subname.src.add:
		- mkdir src
		- { cat > src/index.js } <<EOF
			const name = "$name"; 
			export default r=> (\`Hello from \${name}, \${r}\` |> console.log)
			EOF
	subname.babel.add:
		- do $lpdocs/app/node/transpiling.babel.install
	dev.local_url: '""'

- init:
	- mkdir "$project" && cd $_
	- git init
	- mkdir docs && vi docs/base/setup-from-scratch.rim // this document
	- gaa && gc -m "docs: added base/setup-from-scratch.rim starting-point"
	// - git add . && git commit -m "docs: added base/setup.rim + base/instantiate.sh"

- fix branch
	- git branch -m master "$name"'-master' // rename branch so it will ba able to co-exist in other repos with lp-vue-base as custom origin
	// alt: if create github repo here and push (though to "$name"'-master' instead of master), it replaces the following steps
	- git push --set-upstream "$name"'-master'
	- in github: change default branch to "$name"'-master'
	- git push origin :master // delete master from origin

- misc:
	- add readme
		- cp $lpdocs/admin/README.md ./
	- fix editor config
		- cp $lpdocs/app/misc/my-project.sublime-project $name.sublime-project
		- sed -e 's/subname/'"$subname"'/g' -i '' $name.sublime-project
		- cp $lpdocs/app/misc/.editorconfig ./
	- fix .gitignore
		- cp $lpdocs/app/misc/.gitignore ./
	- add licence
		- cp $lpdocs/admin/licensing/texts/"$licence_spdx" LICENSE
	- git add . && git commit -m "misc: added .gitignore, .editorconfig, *.sublime-project, and README.md"

- module "$subname"
	- init:
		- subname.init
		- cd "$project/$subname"
		' TODO: include readme and license in npm package
			- ln -s ../README.md README.md and LICENSE
				- npm doesn't resolve the links and still exludes them from the package
		- indentation.use tabs: for f in package*.json; sed -e 's/  /'$'\t''/g' -i "" $f
		- package-json-set-val name "$name"
		- package-json-set-val version "0.1.0"
		- package-json-set-val license "$licence_spdx"
		- echo "true" | package-json-set-val private -
		- git add . && git commit -m "$subname: added"
		- cd "$project"
	- fix .gitignore
		- cp $lpdocs/app/misc/.gitignore ./"$subname"/
	- fix git hooks:
		- cp $lpdocs/app/misc/git-hook-runner.sh ./
		- ./git-hook-runner.sh install pre-commit // used by eg. vue-service for linting etc
		- ./git-hook-runner.sh install -noop all // prevent npm install to add faulty ones
		- subname.add-git-hook-runner-inner
		- git add . && git commit -m "fixed git hooks"

	- cd "$subname"
	- subname.src.add
	- subname.babel.add
	- do $lpdocs/app/node/transpiling.babel.install.extras
	- gaa && gc -m "babel: added"
	- eslint:
		// - vimx '/"lint":\ndd' package.json
		- see $lpdocs/app/node/linting.install.(module, watch script, and eslint)
		- git add . && git commit -m "eslint: added"


- testing.unit.setup
	- do $lpdocs/app/node/testing.jest.(install, example.create)

- npm.publish.prepare // select which files to include
	- echo "module.exports = require('./lib')" > index.js
	- echo '[ "lib/", "index.js", "__tests__/" ]' | package-json-set-val files -

TODO:
- testing.coverage.setup
	- see $lpdocs/app/node/testing.coverage


TODO:
- add container
	- cd "$project"
	- rm -rf $lpdocs/app/node/using-container/example/container/data/node_modules
	- cp -r $lpdocs/app/node/using-container/example/container $subname/container
	- fix env:
		- cp -v $lpdocs/app/node/using-container/example/.env* ./
		- ln -sf ../../.env $subname/container/.env
		- for f in .env*; vimx '/image_name=\nf=lc$'"$imagename"'\e' $f
	- adjust for dev:
		- echo '**/node_modules' >> .dockerignore
		- echo '**/data' >> .dockerignore
		- cd $subname
		- vimx '/context:\nf:la../\e' container/docker-compose.yml
		- vimx '/dockerfile:\nf:la'"$subname"'/\e' container/docker-compose.yml
		- attach directly to npm dev:
			// to honor colors and formatting
			- vimx '/app:\no    entrypoint: ["tail", "-f", "/dev/null"]\e' container/docker-compose.dev.yml
			- vimx '/.dev.yml\n$a -d\n\ei\tdocker-compose exec app npm run dev\e' container/start
		- vimx '/.dev.yml\n$a -d\n\ei\tdocker-compose exec app npm run dev\e' container/start
		
		- package-json-script-add '"install-if-needed": "(([ ! -d node_modules ] || (git show --name-status | grep package-lock.json)) && npm --prefer-offline i || echo already-installed)"'
			// to ensure dependencies match package.json (eg. when other collaborator has changed)
		- container.dev-adjustments

		test:
			- (cd container && ./start)
		' TODO: docker in OSX uses linux VM (docker in linux does not), thereby causing performance loss (maybe ~60% slower)
			for dev in OSX; installing node etc on host directly and running npm i && npm run dev directly on host might be preferred
				// for proxies, eg. ssl, use docker.for.mac.localhost
		- git add . && git commit -m "container: added (from lpdocs/node/using-container), adjusted for env=dev"

	' - adjust for prod // specific for instantiation
	' - adjust for test // TODO
	' - adjust for CI // TODO


TODO:
- add in start window automation
	// see terminal/osascript.applescript
	- cd "$project"
	- cp $lpdocs/app/misc/dev ./dev && chmod u+x dev
	- vi dev // add helpers
		local_url=\(dev.local_url)
		local_reg_startable () {
			(echo "$npm_config_registry" | grep localhost \
			&& [ -f "$lpdocs/app/node/registry/local/isUp.sh" ] \
			&& ! $lpdocs/app/node/registry/local/isUp.sh) > /dev/null
		}
	- vi dev // change workspace setup
		{type: "sublime", h: p's h, w: p's w / $([ -z "$local_url" ] && echo 1 || echo 2)}
		{type: "chrome", x: p's w / 2, h: p's h, w: p's w / 2, url: "$local_url", condition: $([ -z "$local_url" ] && echo false || echo true)}
		{type: "iterm", in_new: "tab", condition: $(local_reg_startable && echo true || echo false), cmd: "cd $lpdocs/app/node/registry/local && ./start && docker-compose logs -f --tail=10"}
		{type: "iterm", in_new: "tab"}
		{type: "iterm", in_new: "v_panel", cmd: "cd $subname/container && ./start", m_down: 9}
		{type: "iterm", in_new: "h_panel", cmd: "cd $subname && npm run lint:watch", m_left: 9, condition: ${dev_on_host:-false}}
	- add dev script note to docs.setup.instantiate
	- git add . && git commit -m "added ./dev dev env setup (incl. window automation)"


- add instantiate.sh:
	- echo '#!/usr/bin/env sh' > docs/instantiate.sh
	- echo 'base_name="'"$name"'"' >> docs/instantiate.sh
	- echo 'export subname="'"$subname"'"' >> docs/instantiate.sh
	- { cat >> docs/instantiate.sh; } <<'EOF'

		script_dir () { (a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}; echo "$a"); }

		base_location="$(script_dir)/.."
		export name="$1"
		export project="$(pwd)/$name"
		if [ -z "$name" ]; then echo "no name provided"; sleep 3; exit; fi

		# setup repo
		base_location_remote="$(cd "$base_location" && git remote get-url origin)"
		git clone "$base_location" "$name" && cd "$name"
		git remote remove origin
		git remote add "$base_name"'-remote' "$base_location_remote"
		git remote add "$base_name"'-local' "$base_location"
		git checkout -b master

		# copy data
		ca_dir="$subname/container/data/ca"
		if [ -d "$base_location/$ca_dir" ]; then
			mkdir -p "$ca_dir"
			ln "$base_location/$ca_dir"/* "$ca_dir"/
		fi
		# copying of node_modules might not work well because of links?

		# rename
		mv "$base_name".sublime-project "$name".sublime-project
		sed -e 's/"name": "base-'"$subname"'"/"name": "'"$name"'-'"$subname"'"/' -i '' $subname/package.json

		# next
		echo "see $base_location/docs/setup.instantiate for next steps"; sleep 3
		open "$base_location"/docs; exit # TODO: open vue-base-setup + base-setup as well?
		EOF
	- chmod u+x docs/instantiate.sh


' Notes:
	preset
		TODO: with dual licensing (AGPL + commersial) + contributor agreement
		no name
