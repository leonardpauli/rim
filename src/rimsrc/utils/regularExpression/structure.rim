# regularExpression/structure
' created by Leonard Pauli, 27 jun 2018
	for/inspired by JavaScript regex syntax
	interface idea inspired by https://gskinner.com/regexer

' TODO: make structured astValue:s use getters/setters to modify/query the underlying tokens
	+ ability to join tokens back to sourcecode (+ with location info, delta updates should be possible)
	- will allow for pretty easy linter + autofix creations, etc
	- or use observables? computed caching (?) + will allow for isomorphic + direct delta updates

Regexp
type: regexp // open _content_ close flags
astValue:
	flags:
		ignoreCase is Boolean
		multiline is Boolean
		...
	step:
		type: step
		astValue: ...see "Step"

Step
type: step // also matchgroup (and matchmodifiergroup, though its enabled/negated is stored in paren astValue, see modifiers)
astValue:
	capture: false
	at:
		start: true
		end: false
	usingOr: false // orlist vs andlist
	matches:
		- type: echar // escapedchar/achar
			astValue: Int // regexp.escapedchar(achar, charbycode) gets compiled to regexp.achar with charcode
			tokens: ... // having backrefs to the underlying tokens will also allow for onmouseover descriptions etc
		- type: matchstep // if modifier is included, otherwise unwrap match
			astValue: // 
				match:
					type: echar
					astValue: Int
					tokens: ...
				modifier:
					min: 1
					max: Inf
					greedy: false // +?
					lookahead: // TODO: what if multiple modifiers? eg. (match)+?{1,3}(?=some here)(?!but not this)(?!or that)
						enabled: false
						negated: false
						step:
							type: matchmodifiergroup
							astValue: ...see "Step"
			tokens: ... // for eg. location info of the modifier parts
		- type: characterset
			astValue:
				negated: false
				ranges is many {start: Int, end: Int}
				chars is many Int
			tokens: ...
		- type: backref
			astValue is Int
	tokens:
		capture is Token
		lookahead is Token
		at.start is Token
		at.end is Token
		usingOr is many Token


test:
	flags:
		ignoreCase: true
		multiline: true
	step:
		capture: false
		at:
			start: true
			end: false
		usingOr: false
		matches:
			- type: echar, astValue: Int
			- type: matchstep, astValue:
					match: type: echar, astValue: Int
					modifier:
						min: 1
						max: Inf
						greedy: false
						lookahead:
							enabled: false
							negated: false
							step:
								capture: ...
								...
			- type: characterset, astValue:
					negated: false
					ranges is many {start: Int, end: Int}
					chars is many Int
			- type: backref, astValue: Int
